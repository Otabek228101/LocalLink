# LOCALLINK - API Testing Script
# Quick API testing and demonstration

param(
    [Parameter(Position=0)]
    [ValidateSet('health', 'register', 'login', 'posts', 'create-post', 'events', 'hot-zones', 'full-demo', 'help')]
    [string]$Command = 'help',

    [string]$Email = "test@locallink.uz",
    [string]$Password = "password123",
    [string]$BaseUrl = "http://localhost:4000"
)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ç–æ–∫–µ–Ω–∞
$Global:AuthToken = $null

function Write-Header {
    param([string]$Text)
    Write-Host ""
    Write-Host "=" * 60 -ForegroundColor Cyan
    Write-Host "  $Text" -ForegroundColor Yellow
    Write-Host "=" * 60 -ForegroundColor Cyan
    Write-Host ""
}

function Write-Step {
    param([string]$Text)
    Write-Host "[TEST] " -ForegroundColor Green -NoNewline
    Write-Host $Text -ForegroundColor White
}

function Write-Success {
    param([string]$Text)
    Write-Host "[‚úÖ] " -ForegroundColor Green -NoNewline
    Write-Host $Text -ForegroundColor White
}

function Write-Error {
    param([string]$Text)
    Write-Host "[‚ùå] " -ForegroundColor Red -NoNewline
    Write-Host $Text -ForegroundColor White
}

function Write-Info {
    param([string]$Text)
    Write-Host "[üìã] " -ForegroundColor Blue -NoNewline
    Write-Host $Text -ForegroundColor White
}

function Show-Help {
    Write-Header "üß™ LOCALLINK API Testing Tool"

    Write-Host @"
–ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï:
    .\test-api.ps1 <–∫–æ–º–∞–Ω–¥–∞> [–ø–∞—Ä–∞–º–µ—Ç—Ä—ã]

–ö–û–ú–ê–ù–î–´:
    health       üè• –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å API
    register     üë§ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    login        üîê –í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É
    posts        üìã –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤
    create-post  ‚ûï –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç
    events       üéâ –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π
    hot-zones    üî• –ü–æ–ª—É—á–∏—Ç—å –≥–æ—Ä—è—á–∏–µ –∑–æ–Ω—ã
    full-demo    üé¨ –ü–æ–ª–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è API
    help         ‚ùì –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–ü–ê–†–ê–ú–ï–¢–†–´:
    -Email       Email –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏/–≤—Ö–æ–¥–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: test@locallink.uz)
    -Password    –ü–∞—Ä–æ–ª—å (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: password123)
    -BaseUrl     –ë–∞–∑–æ–≤—ã–π URL API (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: http://localhost:4000)

–ü–†–ò–ú–ï–†–´:
    .\test-api.ps1 health                                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
    .\test-api.ps1 register -Email "user@test.com"          # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
    .\test-api.ps1 full-demo                                 # –ü–æ–ª–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è
"@ -ForegroundColor Gray
}

function Test-APIHealth {
    Write-Step "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è API..."

    try {
        $response = Invoke-RestMethod -Uri "$BaseUrl/health" -Method GET -TimeoutSec 10

        Write-Success "API —Ä–∞–±–æ—Ç–∞–µ—Ç!"
        Write-Host "  Status: " -NoNewline
        Write-Host $response.status -ForegroundColor Green
        Write-Host "  Database: " -NoNewline
        Write-Host $response.database -ForegroundColor $(if($response.database -eq "ok") {"Green"} else {"Red"})
        Write-Host "  Version: " -NoNewline
        Write-Host $response.version -ForegroundColor Cyan
        Write-Host "  Timestamp: " -NoNewline
        Write-Host $response.timestamp -ForegroundColor Gray

        return $true
    }
    catch {
        Write-Error "API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: $($_.Exception.Message)"
        Write-Info "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: .\start.ps1"
        return $false
    }
}

function Register-TestUser {
    param([string]$UserEmail, [string]$UserPassword)

    Write-Step "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $UserEmail"

    $body = @{
        user = @{
            email = $UserEmail
            password = $UserPassword
            first_name = "–¢–µ—Å—Ç"
            last_name = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
            phone = "+998901234567"
        }
    } | ConvertTo-Json -Depth 3

    try {
        $response = Invoke-RestMethod -Uri "$BaseUrl/api/v1/register" -Method POST -Body $body -ContentType "application/json"

        Write-Success "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!"
        Write-Host "  ID: " -NoNewline
        Write-Host $response.user.id -ForegroundColor Cyan
        Write-Host "  Email: " -NoNewline
        Write-Host $response.user.email -ForegroundColor Cyan
        Write-Host "  Name: " -NoNewline
        Write-Host "$($response.user.first_name) $($response.user.last_name)" -ForegroundColor Cyan

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω
        $Global:AuthToken = $response.token
        Write-Info "–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω"

        return $response
    }
    catch {
        $errorDetails = $_.ErrorDetails.Message | ConvertFrom-Json -ErrorAction SilentlyContinue
        if ($errorDetails) {
            Write-Error "–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: $($errorDetails.error)"
            if ($errorDetails.errors) {
                foreach ($field in $errorDetails.errors.PSObject.Properties) {
                    Write-Host "  $($field.Name): $($field.Value -join ', ')" -ForegroundColor Red
                }
            }
        } else {
            Write-Error "–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: $($_.Exception.Message)"
        }
        return $null
    }
}

function Login-User {
    param([string]$UserEmail, [string]$UserPassword)

    Write-Step "–í—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $UserEmail"

    $body = @{
        email = $UserEmail
        password = $UserPassword
    } | ConvertTo-Json

    try {
        $response = Invoke-RestMethod -Uri "$BaseUrl/api/login" -Method POST -Body $body -ContentType "application/json"

        Write-Success "–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!"
        Write-Host "  ID: " -NoNewline
        Write-Host $response.user.id -ForegroundColor Cyan
        Write-Host "  Email: " -NoNewline
        Write-Host $response.user.email -ForegroundColor Cyan

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω
        $Global:AuthToken = $response.token
        Write-Info "–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω"

        return $response
    }
    catch {
        Write-Error "–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: $($_.Exception.Message)"
        return $null
    }
}

function Get-Posts {
    Write-Step "–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ—Å—Ç–æ–≤..."

    try {
        $response = Invoke-RestMethod -Uri "$BaseUrl/api/v1/posts" -Method GET

        Write-Success "–ù–∞–π–¥–µ–Ω–æ –ø–æ—Å—Ç–æ–≤: $($response.posts.Count)"

        foreach ($post in $response.posts | Select-Object -First 5) {
            Write-Host ""
            Write-Host "üìã " -ForegroundColor Blue -NoNewline
            Write-Host $post.title -ForegroundColor White
            Write-Host "   –ö–∞—Ç–µ–≥–æ—Ä–∏—è: " -NoNewline
            Write-Host $post.category -ForegroundColor Yellow
            Write-Host "   –õ–æ–∫–∞—Ü–∏—è: " -NoNewline
            Write-Host $post.location -ForegroundColor Cyan
            if ($post.price) {
                Write-Host "   –¶–µ–Ω–∞: " -NoNewline
                Write-Host "$($post.price) $($post.currency)" -ForegroundColor Green
            }
            Write-Host "   –ê–≤—Ç–æ—Ä: " -NoNewline
            Write-Host "$($post.user.first_name) $($post.user.last_name)" -ForegroundColor Magenta
        }

        if ($response.posts.Count -gt 5) {
            Write-Host ""
            Write-Info "... –∏ –µ—â–µ $($response.posts.Count - 5) –ø–æ—Å—Ç–æ–≤"
        }

        return $response.posts
    }
    catch {
        Write-Error "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤: $($_.Exception.Message)"
        return $null
    }
}

function Create-TestPost {
    if (-not $Global:AuthToken) {
        Write-Error "–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è. –í—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ login –∏–ª–∏ register"
        return $null
    }

    Write-Step "–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞..."

    $headers = @{
        "Authorization" = "Bearer $Global:AuthToken"
        "Content-Type" = "application/json"
    }

    $body = @{
        post = @{
            title = "üîß –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç –æ—Ç PowerShell"
            description = "–≠—Ç–æ—Ç –ø–æ—Å—Ç —Å–æ–∑–¥–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API. –ù—É–∂–µ–Ω –º–∞—Å—Ç–µ—Ä –¥–ª—è –º–µ–ª–∫–æ–≥–æ —Ä–µ–º–æ–Ω—Ç–∞."
            category = "task"
            post_type = "seeking"
            location = "–¢–∞—à–∫–µ–Ω—Ç, –ú–∏—Ä–∑–æ-–£–ª—É–≥–±–µ–∫"
            urgency = "today"
            price = 150000
            currency = "UZS"
            skills_required = "–ú–µ–ª–∫–∏–π —Ä–µ–º–æ–Ω—Ç"
            duration_estimate = "2-3 —á–∞—Å–∞"
        }
    } | ConvertTo-Json -Depth 3

    try {
        $response = Invoke-RestMethod -Uri "$BaseUrl/api/v1/posts" -Method POST -Body $body -Headers $headers

        Write-Success "–ü–æ—Å—Ç —Å–æ–∑–¥–∞–Ω!"
        Write-Host "  ID: " -NoNewline
        Write-Host $response.post.id -ForegroundColor Cyan
        Write-Host "  –ó–∞–≥–æ–ª–æ–≤–æ–∫: " -NoNewline
        Write-Host $response.post.title -ForegroundColor White
        Write-Host "  –ö–∞—Ç–µ–≥–æ—Ä–∏—è: " -NoNewline
        Write-Host $response.post.category -ForegroundColor Yellow
        Write-Host "  –¶–µ–Ω–∞: " -NoNewline
        Write-Host "$($response.post.price) $($response.post.currency)" -ForegroundColor Green

        return $response.post
    }
    catch {
        Write-Error "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞: $($_.Exception.Message)"
        return $null
    }
}

function Get-Events {
    Write-Step "–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π..."

    try {
        $response = Invoke-RestMethod -Uri "$BaseUrl/api/v1/events/available" -Method GET

        Write-Success "–ù–∞–π–¥–µ–Ω–æ —Å–æ–±—ã—Ç–∏–π: $($response.events.Count)"

        foreach ($event in $response.events) {
            Write-Host ""
            Write-Host "üéâ " -ForegroundColor Yellow -NoNewline
            Write-Host $event.title -ForegroundColor White
            Write-Host "   –î–∞—Ç–∞: " -NoNewline
            Write-Host $event.event_date -ForegroundColor Cyan
            Write-Host "   –£—á–∞—Å—Ç–Ω–∏–∫–∏: " -NoNewline
            Write-Host "$($event.current_participants)/$($event.max_participants)" -ForegroundColor Green
            Write-Host "   –õ–æ–∫–∞—Ü–∏—è: " -NoNewline
            Write-Host $event.location -ForegroundColor Cyan
            if ($event.price) {
                Write-Host "   –¶–µ–Ω–∞: " -NoNewline
                Write-Host "$($event.price) $($event.currency)" -ForegroundColor Green
            }
        }

        return $response.events
    }
    catch {
        Write-Error "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π: $($_.Exception.Message)"
        return $null
    }
}

function Get-HotZones {
    Write-Step "–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–æ—Ä—è—á–∏—Ö –∑–æ–Ω..."

    try {
        $response = Invoke-RestMethod -Uri "$BaseUrl/api/v1/hot-zones" -Method GET

        Write-Success "–ù–∞–π–¥–µ–Ω–æ –≥–æ—Ä—è—á–∏—Ö –∑–æ–Ω: $($response.hot_zones.Count)"

        foreach ($zone in $response.hot_zones) {
            Write-Host ""
            Write-Host "üî• " -ForegroundColor Red -NoNewline
            Write-Host "–ì–æ—Ä—è—á–∞—è –∑–æ–Ω–∞" -ForegroundColor White
            Write-Host "   –ü–æ—Å—Ç–æ–≤: " -NoNewline
            Write-Host $zone.post_count -ForegroundColor Yellow
            Write-Host "   –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: " -NoNewline
            Write-Host $zone.center -ForegroundColor Cyan
        }

        return $response.hot_zones
    }
    catch {
        Write-Error "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–æ—Ä—è—á–∏—Ö –∑–æ–Ω: $($_.Exception.Message)"
        return $null
    }
}

function Run-FullDemo {
    Write-Header "üé¨ –ü–æ–ª–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è API LOCALLINK"

    Write-Host "–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø—Ä–æ–¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ API:" -ForegroundColor Gray
    Write-Host "1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ API" -ForegroundColor Gray
    Write-Host "2. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" -ForegroundColor Gray
    Write-Host "3. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ—Å—Ç–æ–≤" -ForegroundColor Gray
    Write-Host "4. –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞" -ForegroundColor Gray
    Write-Host "5. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π" -ForegroundColor Gray
    Write-Host "6. –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–æ—Ä—è—á–∏—Ö –∑–æ–Ω" -ForegroundColor Gray
    Write-Host ""

    $confirm = Read-Host "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é? (Y/n)"
    if ($confirm -eq 'n' -or $confirm -eq 'N') {
        Write-Info "–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞"
        return
    }

    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
    Write-Host ""
    Write-Host "üè• –®–ê–ì 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ API" -ForegroundColor Yellow
    $healthOk = Test-APIHealth
    if (-not $healthOk) {
        Write-Error "API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏."
        return
    }

    Start-Sleep -Seconds 2

    # 2. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
    Write-Host ""
    Write-Host "üë§ –®–ê–ì 2: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" -ForegroundColor Yellow
    $timestamp = Get-Date -Format "yyyyMMdd_HHmmss"
    $testEmail = "demo_$timestamp@locallink.uz"
    $user = Register-TestUser -UserEmail $testEmail -UserPassword $Password

    if (-not $user) {
        Write-Info "–ü–æ–ø—Ä–æ–±—É–µ–º –≤–æ–π—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∞–∫–∫–∞—É–Ω—Ç–æ–º..."
        $user = Login-User -UserEmail $Email -UserPassword $Password
    }

    Start-Sleep -Seconds 2

    # 3. –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤
    Write-Host ""
    Write-Host "üìã –®–ê–ì 3: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ—Å—Ç–æ–≤" -ForegroundColor Yellow
    $posts = Get-Posts

    Start-Sleep -Seconds 2

    # 4. –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞
    if ($Global:AuthToken) {
        Write-Host ""
        Write-Host "‚ûï –®–ê–ì 4: –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞" -ForegroundColor Yellow
        $newPost = Create-TestPost
        Start-Sleep -Seconds 2
    }

    # 5. –°–æ–±—ã—Ç–∏—è
    Write-Host ""
    Write-Host "üéâ –®–ê–ì 5: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π" -ForegroundColor Yellow
    $events = Get-Events

    Start-Sleep -Seconds 2

    # 6. –ì–æ—Ä—è—á–∏–µ –∑–æ–Ω—ã
    Write-Host ""
    Write-Host "üî• –®–ê–ì 6: –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–æ—Ä—è—á–∏—Ö –∑–æ–Ω" -ForegroundColor Yellow
    $hotZones = Get-HotZones

    # –ò—Ç–æ–≥–∏
    Write-Header "üéâ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"

    Write-Host "üìä " -ForegroundColor Blue -NoNewline
    Write-Host "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:" -ForegroundColor White
    if ($posts) { Write-Host "   üìã –ü–æ—Å—Ç–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: $($posts.Count)" -ForegroundColor Gray }
    if ($events) { Write-Host "   üéâ –°–æ–±—ã—Ç–∏—è –Ω–∞–π–¥–µ–Ω—ã: $($events.Count)" -ForegroundColor Gray }
    if ($hotZones) { Write-Host "   üî• –ì–æ—Ä—è—á–∏—Ö –∑–æ–Ω: $($hotZones.Count)" -ForegroundColor Gray }
    if ($Global:AuthToken) { Write-Host "   üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: –∞–∫—Ç–∏–≤–Ω–∞" -ForegroundColor Green }

    Write-Host ""
    Write-Host "üîó " -ForegroundColor Cyan -NoNewline
    Write-Host "–ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏:" -ForegroundColor White
    Write-Host "   API Health: $BaseUrl/health" -ForegroundColor Gray
    Write-Host "   Posts API: $BaseUrl/api/v1/posts" -ForegroundColor Gray
    Write-Host "   Events API: $BaseUrl/api/v1/events/available" -ForegroundColor Gray
}

# ========================================
# –û–°–ù–û–í–ù–ê–Ø –õ–û–ì–ò–ö–ê
# ========================================

switch ($Command.ToLower()) {
    'health' {
        Write-Header "üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ API"
        Test-APIHealth | Out-Null
    }
    'register' {
        Write-Header "üë§ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        Register-TestUser -UserEmail $Email -UserPassword $Password | Out-Null
    }
    'login' {
        Write-Header "üîê –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É"
        Login-User -UserEmail $Email -UserPassword $Password | Out-Null
    }
    'posts' {
        Write-Header "üìã –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤"
        Get-Posts | Out-Null
    }
    'create-post' {
        Write-Header "‚ûï –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞"
        Create-TestPost | Out-Null
    }
    'events' {
        Write-Header "üéâ –°–æ–±—ã—Ç–∏—è"
        Get-Events | Out-Null
    }
    'hot-zones' {
        Write-Header "üî• –ì–æ—Ä—è—á–∏–µ –∑–æ–Ω—ã"
        Get-HotZones | Out-Null
    }
    'full-demo' {
        Run-FullDemo
    }
    'help' {
        Show-Help
    }
    default {
        Write-Error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: $Command"
        Show-Help
    }
}
