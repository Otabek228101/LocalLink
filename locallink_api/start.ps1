# LOCALLINK - –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å init-db.sql

Write-Host "üîç LOCALLINK - –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ" -ForegroundColor Cyan
Write-Host ""

function Write-Step {
    param([string]$Text)
    Write-Host "[STEP] " -ForegroundColor Green -NoNewline
    Write-Host $Text -ForegroundColor White
}

function Write-Success {
    param([string]$Text)
    Write-Host "[‚úÖ] " -ForegroundColor Green -NoNewline
    Write-Host $Text -ForegroundColor White
}

function Write-Error {
    param([string]$Text)
    Write-Host "[‚ùå] " -ForegroundColor Red -NoNewline
    Write-Host $Text -ForegroundColor White
}

function Write-Warning {
    param([string]$Text)
    Write-Host "[‚ö†Ô∏è] " -ForegroundColor Yellow -NoNewline
    Write-Host $Text -ForegroundColor White
}

function Write-Info {
    param([string]$Text)
    Write-Host "[üìã] " -ForegroundColor Blue -NoNewline
    Write-Host $Text -ForegroundColor White
}

Write-Step "1. –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
docker-compose down --remove-orphans --volumes

Write-Step "2. –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ñ–∞–π–ª–∞ init-db.sql..."

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
if (Test-Path "init-db.sql") {
    $item = Get-Item "init-db.sql"

    if ($item.PSIsContainer) {
        Write-Error "init-db.sql —è–≤–ª—è–µ—Ç—Å—è –î–ò–†–ï–ö–¢–û–†–ò–ï–ô, –∞ –Ω–µ —Ñ–∞–π–ª–æ–º!"
        Write-Warning "–£–¥–∞–ª—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∏ —Å–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–∞–π–ª..."
        Remove-Item "init-db.sql" -Recurse -Force
    } else {
        Write-Success "init-db.sql —è–≤–ª—è–µ—Ç—Å—è —Ñ–∞–π–ª–æ–º"
        Write-Info "–†–∞–∑–º–µ—Ä: $($item.Length) –±–∞–π—Ç"
    }
} else {
    Write-Warning "–§–∞–π–ª init-db.sql –Ω–µ –Ω–∞–π–¥–µ–Ω"
}

Write-Step "3. –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ init-db.sql..."

# –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π init-db.sql —Ñ–∞–π–ª
$initDbContent = @"
-- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PostGIS —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π –¥–ª—è LOCALLINK
-- –≠—Ç–æ—Ç —Ñ–∞–π–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –ë–î

-- –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–∏
SET CLIENT_ENCODING TO 'UTF8';

-- –°–æ–∑–¥–∞–Ω–∏–µ PostGIS —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ
DO `$`$
BEGIN
    -- –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–æ–∑–¥–∞–µ–º postgis
    IF NOT EXISTS (SELECT 1 FROM pg_extension WHERE extname = 'postgis') THEN
        CREATE EXTENSION postgis;
        RAISE NOTICE 'PostGIS extension created';
    ELSE
        RAISE NOTICE 'PostGIS extension already exists';
    END IF;

    -- –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–æ–∑–¥–∞–µ–º postgis_topology
    IF NOT EXISTS (SELECT 1 FROM pg_extension WHERE extname = 'postgis_topology') THEN
        CREATE EXTENSION postgis_topology;
        RAISE NOTICE 'PostGIS Topology extension created';
    ELSE
        RAISE NOTICE 'PostGIS Topology extension already exists';
    END IF;

    -- –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–æ–∑–¥–∞–µ–º fuzzystrmatch
    IF NOT EXISTS (SELECT 1 FROM pg_extension WHERE extname = 'fuzzystrmatch') THEN
        CREATE EXTENSION fuzzystrmatch;
        RAISE NOTICE 'Fuzzystrmatch extension created';
    ELSE
        RAISE NOTICE 'Fuzzystrmatch extension already exists';
    END IF;

    RAISE NOTICE 'PostGIS initialization completed successfully';

END `$`$;

-- –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏
SELECT 'PostGIS Version: ' || PostGIS_Version() as info;
"@

# –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ —Ñ–∞–π–ª
$initDbContent | Out-File -FilePath "init-db.sql" -Encoding UTF8 -NoNewline

Write-Success "–§–∞–π–ª init-db.sql —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ"

Write-Step "4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞..."
if (Test-Path "init-db.sql") {
    $item = Get-Item "init-db.sql"
    Write-Success "–§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Ä–∞–∑–º–µ—Ä: $($item.Length) –±–∞–π—Ç"
    Write-Info "–ü–µ—Ä–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ —Ñ–∞–π–ª–∞:"
    Get-Content "init-db.sql" -TotalCount 5 | ForEach-Object { Write-Host "   $_" -ForegroundColor Gray }
} else {
    Write-Error "–§–∞–π–ª –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω!"
    exit 1
}

Write-Step "5. –ü—Ä–æ–≤–µ—Ä–∫–∞ docker-compose.yml..."
if (Test-Path "docker-compose.yml") {
    $composeContent = Get-Content "docker-compose.yml" -Raw

    if ($composeContent -match "init-db\.sql") {
        Write-Success "docker-compose.yml —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Å—ã–ª–∫—É –Ω–∞ init-db.sql"
    } else {
        Write-Warning "docker-compose.yml –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Å—ã–ª–∫—É –Ω–∞ init-db.sql"
        Write-Info "–í–æ–∑–º–æ–∂–Ω–æ, –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –æ–±–Ω–æ–≤–∏—Ç—å docker-compose.yml"
    }
} else {
    Write-Error "docker-compose.yml –Ω–µ –Ω–∞–π–¥–µ–Ω!"
    exit 1
}

Write-Step "6. –û—á–∏—Å—Ç–∫–∞ Docker –∫—ç—à–∞..."
docker system prune -f
docker volume prune -f

Write-Step "7. –°–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–æ–≤..."
docker-compose build --no-cache db

Write-Step "8. –ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ –ë–î –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è..."
docker-compose up -d db

Write-Info "–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ PostgreSQL..."
$maxAttempts = 30
$attempt = 0

do {
    $attempt++
    Write-Host "." -NoNewline -ForegroundColor Yellow

    $dbReady = docker-compose exec -T db pg_isready -U postgres -d locallink_api_dev 2>$null
    if ($LASTEXITCODE -eq 0) {
        Write-Host ""
        Write-Success "PostgreSQL –≥–æ—Ç–æ–≤! (–ø–æ–ø—ã—Ç–∫–∞ $attempt)"
        break
    }

    Start-Sleep -Seconds 2
} while ($attempt -lt $maxAttempts)

if ($attempt -eq $maxAttempts) {
    Write-Host ""
    Write-Error "PostgreSQL –Ω–µ –≥–æ—Ç–æ–≤ —á–µ—Ä–µ–∑ $($maxAttempts * 2) —Å–µ–∫—É–Ω–¥"
    Write-Info "–ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏ –ë–î..."
    docker-compose logs db
    exit 1
}

Write-Step "9. –ü—Ä–æ–≤–µ—Ä–∫–∞ PostGIS –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö..."
try {
    $checkPostGIS = docker-compose exec -T db psql -U postgres -d locallink_api_dev -c "SELECT EXISTS(SELECT 1 FROM pg_extension WHERE extname = 'postgis');" -t 2>$null

    if ($checkPostGIS -match "t") {
        Write-Success "PostGIS —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ë–î!"

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–µ—Ä—Å–∏—é PostGIS
        $version = docker-compose exec -T db psql -U postgres -d locallink_api_dev -c "SELECT PostGIS_Version();" -t 2>$null
        Write-Info "–í–µ—Ä—Å–∏—è PostGIS: $($version.Trim())"

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
        Write-Info "–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ PostGIS —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è:"
        $extensions = docker-compose exec -T db psql -U postgres -d locallink_api_dev -c "SELECT extname FROM pg_extension WHERE extname LIKE '%postgis%' OR extname = 'fuzzystrmatch';" -t 2>$null
        $extensions -split "`n" | Where-Object { $_.Trim() -ne "" } | ForEach-Object {
            Write-Host "   - $($_.Trim())" -ForegroundColor Green
        }

    } else {
        Write-Warning "PostGIS –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î"
        Write-Info "–ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏ –ë–î –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏..."
        docker-compose logs db | Select-Object -Last 10
    }
} catch {
    Write-Warning "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å PostGIS: $_"
}

Write-Step "10. –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ë–î –∏ –∑–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤..."
docker-compose down
docker-compose up -d

Write-Info "–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤..."
Start-Sleep -Seconds 10

Write-Step "11. –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ API..."
$maxAttempts = 20
$attempt = 0

do {
    $attempt++
    Write-Host "." -NoNewline -ForegroundColor Yellow

    try {
        $response = Invoke-WebRequest -Uri "http://localhost:4000/health" -TimeoutSec 5 -ErrorAction SilentlyContinue
        if ($response.StatusCode -eq 200) {
            Write-Host ""
            Write-Success "API –≥–æ—Ç–æ–≤! (–ø–æ–ø—ã—Ç–∫–∞ $attempt)"

            # –ü–∞—Ä—Å–∏–º JSON –æ—Ç–≤–µ—Ç
            $healthData = $response.Content | ConvertFrom-Json
            Write-Info "–°—Ç–∞—Ç—É—Å API: $($healthData.status)"
            Write-Info "–°—Ç–∞—Ç—É—Å –ë–î: $($healthData.database)"

            if ($healthData.database -eq "ok") {
                Write-Success "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!"
            } else {
                Write-Warning "–ü—Ä–æ–±–ª–µ–º—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö: $($healthData.database)"
            }
            break
        }
    }
    catch {
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    }

    Start-Sleep -Seconds 3
} while ($attempt -lt $maxAttempts)

if ($attempt -eq $maxAttempts) {
    Write-Host ""
    Write-Error "API –Ω–µ –≥–æ—Ç–æ–≤ —á–µ—Ä–µ–∑ $($maxAttempts * 3) —Å–µ–∫—É–Ω–¥"
    Write-Info "–ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏..."
    Write-Host ""
    Write-Host "=== –õ–û–ì–ò WEB ===" -ForegroundColor Yellow
    docker-compose logs --tail=10 web
    Write-Host ""
    Write-Host "=== –õ–û–ì–ò DB ===" -ForegroundColor Yellow
    docker-compose logs --tail=10 db
}

Write-Host ""
Write-Host "üìä –°—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤:" -ForegroundColor Cyan
docker-compose ps

Write-Host ""
if ($attempt -lt $maxAttempts) {
    Write-Host "üéâ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!" -ForegroundColor Green
} else {
    Write-Host "‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞" -ForegroundColor Yellow
}

Write-Host ""
Write-Host "üîó –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É:" -ForegroundColor Cyan
Write-Host "   curl http://localhost:4000/health" -ForegroundColor Gray
Write-Host "   curl http://localhost:4000/api/v1/posts" -ForegroundColor Gray
