{
  "info": {
    "name": "LocalLink API - –ü–æ–ª–Ω–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è",
    "description": "–ü–æ–ª–Ω–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è LocalLink API —Å –¥–≤—É–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –∏ —á–∞—Ç–æ–º",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:4000"
    },
    {
      "key": "api_url",
      "value": "{{base_url}}/api/v1"
    },
    {
      "key": "auth_token_user1",
      "value": ""
    },
    {
      "key": "auth_token_user2",
      "value": ""
    },
    {
      "key": "user1_id",
      "value": ""
    },
    {
      "key": "user2_id",
      "value": ""
    },
    {
      "key": "post_id",
      "value": ""
    },
    {
      "key": "offer_id",
      "value": ""
    },
    {
      "key": "conversation_id",
      "value": ""
    }
  ],
  "item": [
    {
      "name": "üîç Health Check",
      "item": [
        {
          "name": "Health Check",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/health",
              "host": ["{{base_url}}"],
              "path": ["health"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Health check successful', () => {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.status).to.eql('healthy');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "üîê Authentication - User 1 (–†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å)",
      "item": [
        {
          "name": "Register User 1",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.environment.set('auth_token_user1', response.token);",
                  "    pm.environment.set('user1_id', response.user.id);",
                  "    pm.test('User 1 registration successful', () => {",
                  "        pm.expect(response.token).to.exist;",
                  "        pm.expect(response.user.email).to.eql('employer@example.com');",
                  "    });",
                  "} else {",
                  "    pm.test('Registration failed or user exists', () => {",
                  "        pm.expect(pm.response.code).to.be.oneOf([201, 422]);",
                  "    });",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"user\": {\n    \"email\": \"employer@example.com\",\n    \"password\": \"password123\",\n    \"first_name\": \"–ê–Ω–Ω–∞\",\n    \"last_name\": \"–ò–≤–∞–Ω–æ–≤–∞\",\n    \"phone\": \"+998901234567\",\n    \"location\": \"–¢–∞—à–∫–µ–Ω—Ç, –ú–∏—Ä–∑–æ-–£–ª—É–≥–±–µ–∫\",\n    \"skills\": \"–ú–µ–Ω–µ–¥–∂–º–µ–Ω—Ç, –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è\",\n    \"availability\": \"–ü–æ–ª–Ω—ã–π –¥–µ–Ω—å\"\n  }\n}"
            },
            "url": {
              "raw": "{{api_url}}/register",
              "host": ["{{api_url}}"],
              "path": ["register"]
            }
          }
        },
        {
          "name": "Login User 1",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.environment.set('auth_token_user1', response.token);",
                  "    pm.environment.set('user1_id', response.user.id);",
                  "    pm.test('User 1 login successful', () => {",
                  "        pm.expect(response.token).to.exist;",
                  "    });",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"employer@example.com\",\n  \"password\": \"password123\"\n}"
            },
            "url": {
              "raw": "{{api_url}}/login",
              "host": ["{{api_url}}"],
              "path": ["login"]
            }
          }
        }
      ]
    },
    {
      "name": "üîê Authentication - User 2 (–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å)",
      "item": [
        {
          "name": "Register User 2",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.environment.set('auth_token_user2', response.token);",
                  "    pm.environment.set('user2_id', response.user.id);",
                  "    pm.test('User 2 registration successful', () => {",
                  "        pm.expect(response.token).to.exist;",
                  "        pm.expect(response.user.email).to.eql('worker@example.com');",
                  "    });",
                  "} else {",
                  "    pm.test('Registration failed or user exists', () => {",
                  "        pm.expect(pm.response.code).to.be.oneOf([201, 422]);",
                  "    });",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"user\": {\n    \"email\": \"worker@example.com\",\n    \"password\": \"password123\",\n    \"first_name\": \"–î–º–∏—Ç—Ä–∏–π\",\n    \"last_name\": \"–ü–µ—Ç—Ä–æ–≤\",\n    \"phone\": \"+998907654321\",\n    \"location\": \"–¢–∞—à–∫–µ–Ω—Ç, –Æ–Ω—É—Å-–ê–±–∞–¥\",\n    \"skills\": \"Python, Django, JavaScript, React\",\n    \"availability\": \"–ù–µ–ø–æ–ª–Ω—ã–π –¥–µ–Ω—å\"\n  }\n}"
            },
            "url": {
              "raw": "{{api_url}}/register",
              "host": ["{{api_url}}"],
              "path": ["register"]
            }
          }
        },
        {
          "name": "Login User 2",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.environment.set('auth_token_user2', response.token);",
                  "    pm.environment.set('user2_id', response.user.id);",
                  "    pm.test('User 2 login successful', () => {",
                  "        pm.expect(response.token).to.exist;",
                  "    });",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"worker@example.com\",\n  \"password\": \"password123\"\n}"
            },
            "url": {
              "raw": "{{api_url}}/login",
              "host": ["{{api_url}}"],
              "path": ["login"]
            }
          }
        }
      ]
    },
    {
      "name": "üìù Posts Management",
      "item": [
        {
          "name": "User 1: Create Job Post",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.environment.set('post_id', response.post.id);",
                  "    pm.test('Post created by User 1', () => {",
                  "        pm.expect(response.post.id).to.exist;",
                  "        pm.expect(response.post.title).to.include('–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç');",
                  "    });",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token_user1}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"post\": {\n    \"title\": \"–ù—É–∂–µ–Ω –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç Python\",\n    \"description\": \"–¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ–±–æ–ª—å—à–æ–π –≤–µ–±-—Å–∞–π—Ç –Ω–∞ Django. –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –æ—Ç 2 –ª–µ—Ç. –°—Ä–æ–∫–∏ - 2 –Ω–µ–¥–µ–ª–∏.\",\n    \"category\": \"job\",\n    \"post_type\": \"offer\",\n    \"location\": \"–¢–∞—à–∫–µ–Ω—Ç, –ú–∏—Ä–∑–æ-–£–ª—É–≥–±–µ–∫\",\n    \"urgency\": \"this_week\",\n    \"price\": 500000,\n    \"currency\": \"UZS\",\n    \"skills_required\": \"Python, Django, HTML, CSS, JavaScript\",\n    \"duration_estimate\": \"2 –Ω–µ–¥–µ–ª–∏\",\n    \"max_distance_km\": 15,\n    \"contact_preference\": \"app\"\n  }\n}"
            },
            "url": {
              "raw": "{{api_url}}/posts",
              "host": ["{{api_url}}"],
              "path": ["posts"]
            }
          }
        },
        {
          "name": "Get All Posts",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{api_url}}/posts",
              "host": ["{{api_url}}"],
              "path": ["posts"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Posts retrieved successfully', () => {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.posts).to.be.an('array');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Specific Post",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{api_url}}/posts/{{post_id}}",
              "host": ["{{api_url}}"],
              "path": ["posts", "{{post_id}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Post details retrieved', () => {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.post.id).to.eql(pm.environment.get('post_id'));",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "üíº Offers System",
      "item": [
        {
          "name": "User 2: Accept Original Price",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.environment.set('offer_id', response.offer.id);",
                  "    pm.test('Offer created successfully', () => {",
                  "        pm.expect(response.offer.id).to.exist;",
                  "        pm.expect(response.offer.status).to.eql('accepted');",
                  "    });",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token_user2}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"message\": \"–ì–æ—Ç–æ–≤ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ä–∞–±–æ—Ç—É –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é —Ü–µ–Ω—É! –£ –º–µ–Ω—è –µ—Å—Ç—å –æ–ø—ã—Ç —Å Django –∏ Python.\"\n}"
            },
            "url": {
              "raw": "{{api_url}}/posts/{{post_id}}/offers/accept-price",
              "host": ["{{api_url}}"],
              "path": ["posts", "{{post_id}}", "offers", "accept-price"]
            }
          }
        },
        {
          "name": "User 2: Make Counter Offer",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token_user2}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"offered_price\": 400000,\n \"currency\":\"UZS\",\n \"message\": \"–ú–æ–≥—É —Å–¥–µ–ª–∞—Ç—å –∑–∞ 400–∫ —Å—É–º. –ö–∞—á–µ—Å—Ç–≤–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É—é, –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –º–æ–≥—É –ø–æ–∫–∞–∑–∞—Ç—å.\"\n}"
            },
            "url": {
              "raw": "{{api_url}}/posts/{{post_id}}/offers/counter-offer",
              "host": ["{{api_url}}"],
              "path": ["posts", "{{post_id}}", "offers", "counter-offer"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.test('Counter offer created', () => {",
                  "        pm.expect(response.offer.status).to.eql('pending');",
                  "        pm.expect(response.offer.offered_price).to.exist;",
                  "    });",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "User 1: Get Offers for Post",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token_user1}}"
              }
            ],
            "url": {
              "raw": "{{api_url}}/posts/{{post_id}}/offers",
              "host": ["{{api_url}}"],
              "path": ["posts", "{{post_id}}", "offers"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Offers retrieved for post', () => {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.offers).to.be.an('array');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "User 1: Accept Offer",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token_user1}}"
              }
            ],
            "url": {
              "raw": "{{api_url}}/offers/{{offer_id}}/accept",
              "host": ["{{api_url}}"],
              "path": ["offers", "{{offer_id}}", "accept"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.test('Offer accepted', () => {",
                  "        pm.expect(response.offer.status).to.eql('accepted');",
                  "    });",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "User 2: Complete Work",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token_user2}}"
              }
            ],
            "url": {
              "raw": "{{api_url}}/offers/{{offer_id}}/complete",
              "host": ["{{api_url}}"],
              "path": ["offers", "{{offer_id}}", "complete"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.test('Work completed', () => {",
                  "        pm.expect(response.offer.status).to.eql('completed');",
                  "    });",
                  "}"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "üí¨ Chat System",
      "item": [
        {
          "name": "User 2: Start Conversation",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.environment.set('conversation_id', response.conversation.id);",
                  "    pm.test('Conversation created', () => {",
                  "        pm.expect(response.conversation.id).to.exist;",
                  "    });",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token_user2}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"post_id\": \"{{post_id}}\",\n  \"participant_id\": \"{{user1_id}}\"\n}"
            },
            "url": {
              "raw": "{{api_url}}/conversations",
              "host": ["{{api_url}}"],
              "path": ["conversations"]
            }
          }
        },
        {
          "name": "User 2: Send Message",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token_user2}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"body\": \"–ü—Ä–∏–≤–µ—Ç! –Ø –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω –≤ –≤–∞—à–µ–º –ø—Ä–æ–µ–∫—Ç–µ. –ú–æ–≥—É –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ.\"\n}"
            },
            "url": {
              "raw": "{{api_url}}/conversations/{{conversation_id}}/messages",
              "host": ["{{api_url}}"],
              "path": ["conversations", "{{conversation_id}}", "messages"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.test('Message sent', () => {",
                  "        pm.expect(response.message.body).to.exist;",
                  "    });",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "User 1: Reply Message",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token_user1}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"body\": \"–ü—Ä–∏–≤–µ—Ç! –î–∞, –±—É–¥—É —Ä–∞–¥ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—à–µ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ. –ö–æ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å?\"\n}"
            },
            "url": {
              "raw": "{{api_url}}/conversations/{{conversation_id}}/messages",
              "host": ["{{api_url}}"],
              "path": ["conversations", "{{conversation_id}}", "messages"]
            }
          }
        },
        {
          "name": "Get Conversation Messages",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token_user1}}"
              }
            ],
            "url": {
              "raw": "{{api_url}}/conversations/{{conversation_id}}/messages",
              "host": ["{{api_url}}"],
              "path": ["conversations", "{{conversation_id}}", "messages"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Messages retrieved', () => {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.messages).to.be.an('array');",
                  "    pm.expect(response.messages.length).to.be.greaterThan(0);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "User 1: Get All Conversations",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token_user1}}"
              }
            ],
            "url": {
              "raw": "{{api_url}}/conversations",
              "host": ["{{api_url}}"],
              "path": ["conversations"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Conversations retrieved', () => {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.conversations).to.be.an('array');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "‚≠ê Reviews System",
      "item": [
        {
          "name": "User 1: Leave Review for User 2",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token_user1}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"review\": {\n    \"reviewee_id\": \"{{user2_id}}\",\n    \"post_id\": \"{{post_id}}\",\n    \"rating\": 5,\n    \"work_quality\": 5,\n    \"communication\": 4,\n    \"timeliness\": 5,\n    \"would_recommend\": true,\n    \"review_type\": \"work_completed\",\n    \"comment\": \"–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –°–∞–π—Ç —Å–¥–µ–ª–∞–Ω –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ –∏ –≤ —Å—Ä–æ–∫. –†–µ–∫–æ–º–µ–Ω–¥—É—é!\"\n  }\n}"
            },
            "url": {
              "raw": "{{api_url}}/reviews",
              "host": ["{{api_url}}"],
              "path": ["reviews"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.test('Review created', () => {",
                  "        pm.expect(response.review.rating).to.eql(5);",
                  "    });",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Get User 2 Reviews",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token_user1}}"
              }
            ],
            "url": {
              "raw": "{{api_url}}/users/{{user2_id}}/reviews",
              "host": ["{{api_url}}"],
              "path": ["users", "{{user2_id}}", "reviews"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('User reviews retrieved', () => {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.reviews).to.be.an('array');",
                  "    pm.expect(response.stats).to.exist;",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "üîî Notifications",
      "item": [
        {
          "name": "User 2: Update Location",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token_user2}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"lat\": 41.2995,\n  \"lng\": 69.2401\n}"
            },
            "url": {
              "raw": "{{api_url}}/notifications/location",
              "host": ["{{api_url}}"],
              "path": ["notifications", "location"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Location updated', () => {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.message).to.include('Location updated');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "User 2: Get Notification Preferences",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token_user2}}"
              }
            ],
            "url": {
              "raw": "{{api_url}}/notifications/preferences",
              "host": ["{{api_url}}"],
              "path": ["notifications", "preferences"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Preferences retrieved', () => {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.preferences).to.exist;",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "User 2: Update Notification Preferences",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token_user2}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"preferences\": {\n    \"notification_radius_km\": 5.0,\n    \"notify_jobs\": true,\n    \"notify_tasks\": true,\n    \"notify_events\": false,\n    \"notify_help\": true,\n    \"weekend_notifications\": true,\n    \"min_price\": 100000,\n    \"max_price\": 1000000\n  }\n}"
            },
            "url": {
              "raw": "{{api_url}}/notifications/preferences",
              "host": ["{{api_url}}"],
              "path": ["notifications", "preferences"]
            }
          }
        },
        {
          "name": "User 2: Get Notifications",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token_user2}}"
              }
            ],
            "url": {
              "raw": "{{api_url}}/notifications?limit=20",
              "host": ["{{api_url}}"],
              "path": ["notifications"],
              "query": [
                {
                  "key": "limit",
                  "value": "20"
                }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Notifications retrieved', () => {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.notifications).to.be.an('array');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "üóÇÔ∏è User Profiles",
      "item": [
        {
          "name": "User 1: Get Profile",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token_user1}}"
              }
            ],
            "url": {
              "raw": "{{api_url}}/me",
              "host": ["{{api_url}}"],
              "path": ["me"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('User 1 profile retrieved', () => {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.user.email).to.eql('employer@example.com');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "User 2: Get Profile",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token_user2}}"
              }
            ],
            "url": {
              "raw": "{{api_url}}/me",
              "host": ["{{api_url}}"],
              "path": ["me"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('User 2 profile retrieved', () => {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.user.email).to.eql('worker@example.com');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    }
  ]
}
